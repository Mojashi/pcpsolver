package pcp

object Instances {
  val pcp1 = PCP(List(
    Tile("100", "1"),
    Tile("0", "100"),
    Tile("1", "00"),
  ))
  val pcp2 = PCP(List(
    Tile("11011", "1"),
    Tile("10", "1011"),
    Tile("1", "10"),
  ))
  val pcp3 = PCP(List(
    Tile("110", "00"),
    Tile("011", "1"),
    Tile("00", "1"),
    Tile("1", "100"),
  ))

  //111  111  000  1
  //110  101  00   111
  // UNSOLVABLE!!
  // words = Seq("111", "10")
  val pcpUnsolved = PCP(List(
    Tile("111", "110"),
    Tile("111", "101"),
    Tile("000", "00"),
    Tile("1", "111"),
  ))


  val pcpUnsolved2 = PCP(List(
    Tile("111", "110"),
    Tile("111", "101"),
    Tile("000", "0"),
    Tile("11", "111"),
  ))


  //111  111  10   0
  //110  1    111  000
  val pcpUnsolved3 = PCP(List(
    Tile("111", "110"),
    Tile("111", "1"),
    Tile("10", "111"),
    Tile("0", "000"),
  ))

  //101  00   1    0
  //1    0    101  1
  val pcpUnsolved4 = PCP(List(
    Tile("101", "1"),
    Tile("00", "0"),
    Tile("1", "101"),
    Tile("0", "1"),
    Tile("1", "11"),
  ))
  //110 1 0
  //1 01 110
  val pcpUnsolved5 = PCP(List(
    Tile("110", "1"),
    Tile("1", "01"),
    Tile("0", "110"),
  ))

  // UNSOLVABLE!!
  // words = Seq("0010", "1001", "10", "001"))
  // val alignPrefLen(addPrefixToNFA) = 2

  // words: List(00, 01, 0010, 10010), alignPrefLen: 2

  val pcpUnsolved6 = PCP(List(
    Tile("10", "0"),
    Tile("0", "001"),
    Tile("001", "1"),
  ))

  // UNSOLVABLE!!!
  val pcpUnsolved7 = PCP(List(
    Tile("10", "0"),
    Tile("0", "001"),
    Tile("100", "1"),
  ))
  //watcher.transitions.size=4
  //tt.transitions.size=40
  //start solve
  //sat
  //Some(List(0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 2))
  //Some(Map(0 -> 6, 1 -> 6, 2 -> 3))
  //101010101010000000100100100
  //000000001001001001001001111
  //diff: 11
  //watcher.transitions.size=10
  //tt.transitions.size=87
  //start solve
  //sat
  //Some(List(0, 1, 0, 2, 0, 2, 1, 1, 1, 0))
  //Some(Map(0 -> 4, 1 -> 4, 2 -> 2))
  //100101001010000010
  //000101010010010010
  //diff: 01
  //watcher.transitions.size=15
  //tt.transitions.size=170
  //start solve
  //sat
  //Some(List(1, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0))
  //Some(Map(0 -> 30, 1 -> 30, 2 -> 15))
  //010100100100100100100100100100100100100100101001010010100101001010010100101001010010100101001010010100101001010010100000000000000000010
  //001000010001000100010001000100010001000100010001000100010101010101010101010101010101010010010010010010010010010010010010010010010010010
  //diff: 00
  //watcher.transitions.size=21
  //tt.transitions.size=388
  //start solve
  //sat
  //Some(List(1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 0, 2, 1, 0, 2, 1, 0, 2, 1, 1, 1, 0))
  //Some(Map(0 -> 10, 1 -> 10, 2 -> 5))
  //010010010010010100101001010001010001010000010
  //001000100010001000101010100101001010010010010
  //diff: 000
  //watcher.transitions.size=50
  //tt.transitions.size=1398
  //start solve
  //sat
  //Some(List(1, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0))
  //Some(Map(0 -> 38, 1 -> 38, 2 -> 19))
  //001001001001001001001001001001001001001001001001001001001010010100010100010100010100010100010100010100010100010100010100010100010100010100010100010100010100010100010100010
  //001001000100010001000100010001000100010001000100010001000100010001000100010001010100101001010010100101001010010100101001010010100101001010010100101001010010100101001010010
  //diff: 010
  //watcher.transitions.size=62
  //tt.transitions.size=2280
  //start solve
  //sat
  //Some(List(2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 0, 1, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0))
  //Some(Map(0 -> 40, 1 -> 40, 2 -> 20))
  //100100100100100100010100100010100100010100100010100100010100100010100100010100100010100100010100100010100100010100100010100100010100100010100100010100100010100010100010100010100010
  //100010001000100010001001010001001010001001010001001010001001010001001010001001010001001010001001010001001010001001010001001010001001010001001010001001010001001010010100101001010010
  //diff: 1001
  //watcher.transitions.size=93
  //tt.transitions.size=4372
  //start solve
  //sat
  //Some(List(1, 1, 1, 0, 1, 0, 2, 0, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 0, 1, 1, 0, 1, 0, 2, 1, 0, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 1, 0, 2, 0, 1, 0))
  //Some(Map(0 -> 128, 1 -> 128, 2 -> 64))


  //diff: 0010
  //watcher.transitions.size=156
  //tt.transitions.size=10244
  //start solve
  //unsat
  //None
  //None
  //Exception in thread "main" java.lang.ExceptionInInitializerError
  //	at pcp.SubstringSolver.main(SubstringSolver.scala)
  //Caused by: java.util.NoSuchElementException: None.get
  //	at scala.None$.get(Option.scala:627)
  //	at scala.None$.get(Option.scala:626)
  //	at pcp.SubstringSolver$.main(SubstringSolver.scala:25)
  //	at pcp.SubstringSolver$.<clinit>(SubstringSolver.scala:13)
  //	... 1 more
  //
  //プロセスは終了コード 1 で終了しました


  //1111  1101  11
  //1110  1     1111
  val pcp34Unsolved = PCP(List(
    Tile("1111", "1110"),
    Tile("1101", "1"),
    Tile("11", "1111"),
  ))

  // UNSOLVED by words: ListBuffer(1, 0, 11, 10, 111), alignPrefLen: 0
  // 111  111  000  1
  // 110  101  00   111
  val pcp43Unsolved = PCP(List(
    Tile("111", "110"),
    Tile("111", "101"),
    Tile("000", "00"),
    Tile("1", "111"),
  ))

  //111  111  000  11
  //110  101  0    111
  //words: ListBuffer(1, 0, 10), alignPrefLen: 0
  val pcp43Unsolved2 = PCP(List(
    Tile("111", "110"),
    Tile("111", "101"),
    Tile("000", "0"),
    Tile("11", "111"),
  ))
}
